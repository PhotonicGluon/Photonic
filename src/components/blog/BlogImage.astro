---
import type { ImageMetadata } from "astro";
import UnifiedImage from "@components/generic/UnifiedImage.astro";

// Define props
export interface Props {
    /** Source of the image */
    src: string | ImageMetadata;
    /** Alternative text if the image cannot be displayed */
    alt: string;
}

const { src, alt } = Astro.props;
---

{/* Actual figure */}
<figure class="group image-wrapper flex flex-col items-center">
    <picture
        class="flex translate-x-(--shift-x) translate-y-(--shift-y) flex-col items-center transition-transform duration-300 ease-in-out group-[&.clicked]:absolute group-[&.clicked]:z-110 group-[&.clicked]:px-10 hover:cursor-zoom-in group-[&.clicked]:hover:cursor-zoom-out focus:scale-105 focus:outline-none"
        tabindex="0"
    >
        <UnifiedImage
            src={src}
            alt={alt}
            class="h-auto scale-(--scale-factor) rounded-3xl transition-transform duration-300 ease-in-out"
            loading="lazy"
        />
        <div class="hidden h-[80vh] w-screen max-w-screen-md px-10"></div>
    </picture>
    <figcaption class="block text-base text-gray-500 group-[&.clicked]:hidden">
        {alt}
    </figcaption>
</figure>

{/* Handle clicks */}
<script>
    import $ from "jquery";

    const windowElem = $(window);
    const mainSectionElem = $("section");
    const mainArticleElem = $("article");
    const blurOverlayElem = $("#blur-overlay");

    let leftOffset: number;
    let screenCenter: { x: number; y: number };
    function onWindowSizeChange() {
        leftOffset =
            (mainSectionElem.outerWidth(true)! - mainSectionElem.width()!) / 2 +
            (mainArticleElem.outerWidth(true)! - mainArticleElem.width()!) / 2;
        screenCenter = {
            x: windowElem.width()! / 2,
            y: windowElem.height()! / 2,
        };
    }

    windowElem.on("resize", onWindowSizeChange);
    onWindowSizeChange();

    document.querySelectorAll(".image-wrapper").forEach((element) => {
        const wrapper = $(element);
        const picture = wrapper.children("picture");
        const scaleReferenceElem = picture.children("div");

        const width = picture.width()!;
        const height = picture.height()!;

        let scaleFactor = Math.min(scaleReferenceElem.width()! / width, scaleReferenceElem.height()! / height);
        if (scaleFactor < 1) {
            scaleFactor = 1;
        }

        function handleZoom() {
            // Compute image's position relative to viewport edges
            const imagePos = picture.position()!;
            const imageX = imagePos.left + leftOffset;
            const imageY = imagePos.top + mainSectionElem.offset()!.top - windowElem.scrollTop()!;

            // Determine delta to zoom
            let deltaX = screenCenter.x - imageX - width / 2;
            const deltaY = screenCenter.y - imageY - height / 2;

            if (deltaX < 0) {
                // Based on how the layout of the blog is, the image is always on the left, so the delta should not be
                // negative. Thus if it is, make it 0
                deltaX = 0;
            }

            // Update the shift values
            wrapper.addClass("clicked");
            picture.css("--shift-x", `${deltaX}px`);
            picture.css("--shift-y", `${deltaY}px`);
            picture.css("--scale-factor", `${scaleFactor * 100}%`);

            // Apply blur
            blurOverlayElem.addClass("flex");
            blurOverlayElem.removeClass("hidden");

            // Unzoom on scroll or click outside
            windowElem.on("scroll", handleUnzoom);
            blurOverlayElem.on("click", handleUnzoom);
        }

        function handleUnzoom() {
            // Reset translation
            wrapper.removeClass("clicked");
            picture.css("--shift-x", "0");
            picture.css("--shift-y", "0");
            picture.css("--scale-factor", "100%");

            // Undo blur
            blurOverlayElem.removeClass("flex");
            blurOverlayElem.addClass("hidden");

            // Stop listening to scroll and clicks
            windowElem.off("scroll", handleUnzoom);
            blurOverlayElem.off("click", handleUnzoom);
        }

        // Handle clicks
        $(element).on("click", () => {
            if (!wrapper.hasClass("clicked")) {
                handleZoom();
            } else {
                handleUnzoom();
            }
        });
    });
</script>
