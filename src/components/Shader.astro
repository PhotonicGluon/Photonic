---
import { readFileSync } from "fs";
import path from "path";

// Set up properties of the component
export interface Props {
    /** Optional class(es) to apply */
    class?: string;
    /** ID of the element */
    id: string;
    /** Base path to the fragment shader's folder */
    basePath: string;
    /**
     * Optional shader constants.
     *
     * These constants are meant to be passed into the shader once.
     */
    constants?: { [name: string]: any };
}

const { class: className, id, basePath, constants } = Astro.props;

// Determine which fragment shader to use
let fragPath = path.join(basePath, "modifiable.frag");
let editableUniformsPath: string | null = path.join(basePath, "editable-uniforms.ts");
if (import.meta.env.PROD) {
    const latestShader = readFileSync(path.join(basePath, "latest.txt"), "utf-8").trimEnd();
    fragPath = path.join(basePath, `${latestShader}.frag`);
    editableUniformsPath = null;
}

// Get fragment shader code
const shaderFrag: string = readFileSync(fragPath, "utf-8");

// Get editable uniforms
let editableUniforms;
if (editableUniformsPath) {
    editableUniforms = (await import(/* @vite-ignore */ "/" + editableUniformsPath)).editableUniforms;
} else {
    editableUniforms = {};
}
---

<canvas
    class={"shader h-[inherit] w-full" + ` ${className}`}
    id={id}
    data-shader-url={fragPath}
    data-shader-frag={shaderFrag}
    data-constants={JSON.stringify(constants)}
    data-editable-uniforms={JSON.stringify(editableUniforms)}></canvas>

<script>
    /**
     * Partially adapted from
     * https://github.com/s-thom/website-2023/blob/26d8a1a/src/components/site/ShaderBackdrop.astro.
     */

    import { setupShader } from "@lib/shaders/setup";
    import shaderVert from "@lib/shaders/2d.vert";
    import type { SlidersInitialisedEvent } from "@lib/tweakpane/panel";
    import type { SlidersOptionsMap } from "@lib/tweakpane/options";
    import options from "@lib/options";
    import WATCHED_MEDIA from "@lib/options/media";
    import { MotionPreference } from "@lib/options/types";

    const FRAME_RATE_THRESHOLD = 40.0; // Minimum frame rate for the shader to continue showing, else stop
    const FRAME_RATE_BUFFER_LEN = 5; // Number of frame rates to keep track when calculating the moving average

    // Process each canvas
    document.querySelectorAll(".shader").forEach((element) => {
        // Cast the element as a canvas element
        const canvas = element as HTMLCanvasElement;

        // Get fragment shader
        const shaderFrag = canvas.dataset.shaderFrag;
        if (!shaderFrag) {
            throw Error("No fragment shader given");
        }
        delete canvas.dataset.shaderFrag; // No need to keep it now that we have it

        // Get shader constants
        let constants: { [name: string]: any };
        if (canvas.dataset.constants) {
            constants = JSON.parse(canvas.dataset.constants);
        } else {
            constants = {};
        }
        delete canvas.dataset.constants;

        // Define editable uniforms
        let editableUniforms: SlidersOptionsMap;
        if (canvas.dataset.editableUniforms) {
            editableUniforms = JSON.parse(canvas.dataset.editableUniforms);
        } else {
            editableUniforms = {};
        }
        delete canvas.dataset.editableUniforms;

        window.addEventListener("sliders-initialised", ((event: InstanceType<typeof SlidersInitialisedEvent>) => {
            event.detail.registerSliders(canvas.id, editableUniforms);
        }) as (e: Event) => void);

        // Define uniforms
        const uniforms: Record<string, any> = {};

        for (const [key, value] of Object.entries(constants)) {
            uniforms[key] = value;
        }

        // Set up shader
        let lastTime: DOMHighResTimeStamp | undefined;
        let prevFrameRates: number[] = [];
        for (let i = 0; i < FRAME_RATE_BUFFER_LEN; i++) {
            prevFrameRates.push(FRAME_RATE_THRESHOLD);
        }

        const { start, stop } = setupShader({
            canvas,
            sources: { vertex: shaderVert, fragment: shaderFrag },
            uniforms,
            onFrame: (time) => {
                // Update pixel density
                uniforms.uPixelDensity = window.devicePixelRatio;

                // Update any editable uniforms
                for (const [key, value] of Object.entries(editableUniforms)) {
                    uniforms[key] = value.value;
                }

                // Determine the moving average frame rate
                const lastFrameDelta = lastTime === undefined ? 0 : time - lastTime; // In ms
                const currFrameRate = 1e3 / lastFrameDelta;

                // Halt if frame rate drops below threshold consistently
                prevFrameRates.push(currFrameRate);
                prevFrameRates = prevFrameRates.slice(1); // Remove oldest frame rate

                let frameRateTotal = 0;
                for (let i = 0; i < FRAME_RATE_BUFFER_LEN; i++) {
                    frameRateTotal += prevFrameRates[i];
                }
                const avgFrameRate = frameRateTotal / FRAME_RATE_BUFFER_LEN;

                if (avgFrameRate < FRAME_RATE_THRESHOLD) {
                    console.log(
                        `Halting shader(s) due to too low FPS (${avgFrameRate} < ${FRAME_RATE_THRESHOLD})`,
                    );
                    stop();
                }

                // Handle reduced motion
                if (options.get().motion === MotionPreference.REDUCE && time > 1) {
                    stop();
                }

                // Update timestamp
                lastTime = time;
            },
            textures: undefined,
            onTexturesReady: () => {
                start();
            },
        });

        WATCHED_MEDIA.motion.addEventListener("change", (_) => start());

        start();
    });
</script>
