---
import { readFileSync } from "fs";
import seedrandom from "seedrandom";

// Import component style
import "./style.scss";

// Set up properties of the component
export interface Props {
    /** ID of the element */
    id: string;
    /** URL to the fragment shader */
    fragURL: string;
    /**
     * Optional URL to a typescript file containing editable uniforms.
     *
     * Do **not** include a leading slash (i.e., follow the format used by `fragURL`).
     */
    editableUniformsURL?: string;
    /** Optional URL to the image that is used */
    imageURL?: string;
}

const { id, fragURL, editableUniformsURL, imageURL } = Astro.props;

// Get fragment shader code
const shaderFrag: string = readFileSync(fragURL, "utf-8");

// Get editable uniforms
let editableUniforms;
if (editableUniformsURL) {
    editableUniforms = (await import(/* @vite-ignore */ "/" + editableUniformsURL)).editableUniforms;
} else {
    editableUniforms = {};
}

// Define pseudo-random offset and scale of the image
let offset = [0, 0];
let scale = 1;
if (imageURL) {
    const random = seedrandom(id);
    offset = [Math.floor(random() * 21) - 10, Math.floor(random() * 21) - 10];
    scale = random() * 2 + 1;
}
---

<div
    class="shader-backdrop"
    id={`backdrop-${id}`}
    data-image-url={imageURL}
    data-shader-url={fragURL}
    data-shader-frag={shaderFrag}
    data-editable-uniforms={JSON.stringify(editableUniforms)}
    data-offset={JSON.stringify(offset)}
    data-warp-scale={JSON.stringify(scale)}
>
    <canvas class="shader-backdrop-canvas"></canvas>
</div>
<script>
    import "./script";
</script>
