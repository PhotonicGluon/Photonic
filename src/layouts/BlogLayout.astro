---
import type { MarkdownHeading } from "astro";
import type { CollectionEntry } from "astro:content";

import { toPost } from "@lib/blog/post";
import { humanizeDate } from "@lib/misc/dates";

import SEO from "@components/top/SEO.astro";

import MainLayout from "@layouts/MainLayout.astro";

export interface Props {
    /** Main blog post data */
    post: CollectionEntry<"blog">["data"];
    /** List of headings in the blog */
    headings: MarkdownHeading[];
}

const { post: rawPost, headings } = Astro.props;
const post = toPost(rawPost);

// Generate OGP data for SEO
const ogpData: any = {
    title: post.title,
    description: post.summary,
};
if (post.image !== undefined) {
    ogpData.image = {
        url: post.image.url,
        alt: post.image.alt,
    };
} else {
    // Use the "no image" image
    ogpData.image = {
        url: Astro.site + "no-image.png",
        alt: "No image provided",
        type: "image/png",
    };
}
---

<MainLayout title={post.title} subtitle={humanizeDate(new Date(post.pubDate))}>
    {/* SEO */}
    <Fragment slot="head-seo">
        <SEO title={post.title} description={post.summary} openGraph={ogpData} />
    </Fragment>

    {/* Main stuff */}
    <section
        class="flex flex-col gap-4 divide-y-2 divide-solid divide-gray-500/25 lg:flex-row lg:gap-2 lg:divide-none"
    >
        {/* List of contents */}
        <aside
            class="pb-4 motion-safe:delay-200 motion-safe:duration-500 motion-safe:animate-in motion-safe:fade-in motion-safe:fill-mode-backwards lg:order-2 lg:pb-0 lg:pl-2 motion-safe:lg:slide-in-from-right-4"
            id="list-of-contents"
            data-headings={JSON.stringify(headings)}
        >
            <div class="sticky top-3">
                {/* Actual list */}
                <span class="block text-2xl font-bold lg:text-lg">Contents</span>
                <ul class="block space-y-2 text-base lg:w-64 lg:space-y-0 lg:text-sm">
                    {
                        headings.map((heading) => (
                            <li
                                class="loc-entry pl-(--depth) text-left"
                                style={{ "--depth": (heading.depth - 1) * 0.75 + "em" }}
                                id={`loc-${heading.slug}`}
                            >
                                <a class="!text-gray-300 hover:!text-gray-400" href={`#${heading.slug}`}>
                                    {heading.text}
                                </a>
                            </li>
                        ))
                    }
                </ul>

                {/* Active heading styling */}
                <style>
                    @import "@styles/global.css";

                    .loc-entry.active {
                        @apply font-bold;
                    }
                </style>
            </div>
        </aside>

        {/* Reading progress bar for mobile */}
        {/* TODO: Style this better; possibly move to another spot */}
        <div
            class="fixed top-0 left-0 block h-4 w-full origin-[0_50%] transform-[scaleX(0)] bg-red-500 lg:hidden"
            id="progress"
            style={{
                "--start-range": "100%", // Default is to not show the progress bar
            }}
        >
        </div>

        {/* Blog post */}
        <article
            class="mx-auto w-full max-w-screen-md self-start motion-safe:delay-200 motion-safe:duration-500 motion-safe:animate-in motion-safe:fade-in motion-safe:fill-mode-backwards lg:sticky lg:top-3 lg:order-1 motion-safe:lg:slide-in-from-left-4"
            id="blog-post"
        >
            <slot />
        </article>

        {/* Progress bar styling and scripting */}
        <style>
            html {
                scroll-timeline: --page-scroll block;
            }

            @keyframes grow-progress {
                from {
                    transform: scaleX(0);
                }
                to {
                    transform: scaleX(1);
                }
            }

            #progress.with-timeline {
                animation: grow-progress auto linear;
                animation-timeline: --page-scroll;
                animation-range: entry-crossing var(--start-range) exit-crossing 100%;
            }
        </style>
        <script>
            import $ from "jquery";
            import { isAnimationTimelineSupported } from "@lib/misc/checks";

            if (isAnimationTimelineSupported()) {
                $("#progress").addClass("with-timeline");
            }

            /**
             * Set the progress bar start range
             */
            function setProgressBarStartRange() {
                const blogPostY = $("#blog-post")!.offset()!.top;
                const fullHeight = $(document).height()!;

                $("#progress").css("--start-range", `${(blogPostY / fullHeight) * 100}%`);
            }

            // Trigger on window resize or document load
            $(setProgressBarStartRange);
            $(window).on("resize", setProgressBarStartRange);
        </script>
    </section>
</MainLayout>

{/* Script to handle active heading */}
<script>
    import type { MarkdownHeading } from "astro";
    import $ from "jquery";

    import { searchSorted } from "@lib/misc/iterables";

    // Get headings
    const headings = $("#list-of-contents").data("headings")! as MarkdownHeading[];
    delete $("#list-of-contents")[0].dataset.headings; // No need to keep it now that we have it

    let headingPositions: number[] = [];

    // Update heading positions on window load or resize
    function onWindowUpdate() {
        console.log("Window update");
        headingPositions = headings.map((heading) => {
            return $(`#${heading.slug}`).offset()!.top;
        });
    }
    $(onWindowUpdate);
    $(window).on("resize", onWindowUpdate);

    // Handle active heading
    let headingIndex: number = -1;
    $(window).on("scroll", () => {
        if (headingPositions.length === 0) {
            return;
        }

        // Calculate the current 'viewer' y position
        // (We take the middle of the page as this)
        const viewY = window.scrollY + window.innerHeight / 2;

        // Find nearest heading
        const newHeadingIndex = searchSorted(headingPositions, viewY) - 1; // -1 because we want the previous heading
        if (newHeadingIndex === headingIndex) {
            return;
        }

        // Update active heading
        if (headingIndex !== -1) {
            $(`#loc-${headings[headingIndex].slug}`).removeClass("active");
        }
        if (newHeadingIndex !== -1) {
            console.log(newHeadingIndex, headings[newHeadingIndex]);
            $(`#loc-${headings[newHeadingIndex].slug}`).addClass("active");
        }

        // TODO: Update shown heading for mobile

        headingIndex = newHeadingIndex;
    });
</script>

{/* Blog page styling */}
<style is:global>
    @import "@styles/global.css";

    /* General */
    #blog-post p {
        @apply leading-snug md:leading-normal;
    }

    /* Headings */
    #blog-post h1 {
        @apply mt-2 mb-0.5 text-3xl font-extrabold md:text-4xl;
    }

    #blog-post h2 {
        @apply mt-2 mb-0.5 text-2xl font-bold md:text-3xl;
    }

    #blog-post h3 {
        @apply mt-1.5 mb-0.5 text-xl font-bold md:text-2xl;
    }

    #blog-post h4 {
        @apply mt-1.5 text-lg font-bold md:text-xl;
    }

    #blog-post h5 {
        @apply mt-1 text-base font-bold md:text-lg;
    }

    #blog-post h6 {
        @apply mt-1 text-base italic underline md:font-bold md:not-italic md:no-underline;
    }

    /* Lists */
    #blog-post ul,
    #blog-post ol {
        @apply list-outside space-y-2 pl-4;
    }
    #blog-post ul {
        @apply list-disc;
    }

    #blog-post ol {
        @apply list-decimal;
    }

    #blog-post li * {
        @apply pb-0;
    }

    #blog-post li > ul,
    #blog-post li > ol {
        @apply space-y-1;
    }

    /* Blockquotes */
    #blog-post blockquote {
        @apply my-4 border-s-4 border-gray-600 bg-gray-800/50 p-4;
    }

    #blog-post blockquote p {
        @apply pb-0;
    }

    /* Code and code blocks */
    #blog-post :not(.astro-code) > code {
        @apply rounded-lg bg-gray-800 px-1 py-0.5 text-gray-100;
    }

    #blog-post .astro-code {
        @apply my-2 rounded-lg !bg-gray-800 p-4 text-xs leading-tight lg:text-sm;
    }

    /* Tables */
    #blog-post .markdown-table {
        @apply mb-4 overflow-x-auto rounded-sm md:rounded-none;
    }

    #blog-post table {
        @apply w-full table-auto text-left text-xs text-gray-400 md:mx-auto md:w-max md:text-sm;
    }

    #blog-post table thead {
        @apply bg-gray-700 text-gray-400 uppercase;
    }

    #blog-post table thead tr th {
        @apply px-4 py-1.5;
    }

    #blog-post table tbody tr {
        @apply border-b border-gray-700 bg-gray-900;
    }

    #blog-post table tbody tr th {
        @apply px-4 py-2 font-medium whitespace-nowrap text-gray-50;
    }

    #blog-post table tbody tr td {
        @apply px-4 py-2;
    }

    /* Alerts */
    #blog-post .markdown-alert {
        @apply mb-2 rounded-2xl border border-gray-800 px-6 py-4 md:py-6;
    }

    #blog-post .markdown-alert > :last-child {
        @apply !mb-0 pb-0;
    }

    #blog-post .markdown-alert-title {
        @apply mb-1 flex w-max items-center rounded px-2 py-1 align-middle text-sm font-bold md:text-base;
    }

    #blog-post .markdown-alert-title svg {
        @apply mr-2 size-4 fill-current;
    }

    #blog-post .markdown-alert-note {
        @apply bg-linear-to-tr from-sky-700/25 to-indigo-700/25;
    }

    #blog-post .markdown-alert-note .markdown-alert-title {
        @apply bg-linear-to-tr from-sky-700 to-indigo-700;
    }

    #blog-post .markdown-alert-tip {
        @apply bg-linear-to-tr from-emerald-700/25 to-cyan-700/25;
    }

    #blog-post .markdown-alert-tip .markdown-alert-title {
        @apply bg-linear-to-tr from-emerald-700 to-cyan-700;
    }

    #blog-post .markdown-alert-important {
        @apply bg-linear-to-tr from-purple-700/25 to-indigo-700/25;
    }

    #blog-post .markdown-alert-important .markdown-alert-title {
        @apply bg-linear-to-tr from-purple-700 to-indigo-700;
    }

    #blog-post .markdown-alert-warning {
        @apply bg-linear-to-tr from-orange-700/25 to-amber-700/25;
    }

    #blog-post .markdown-alert-warning .markdown-alert-title {
        @apply bg-linear-to-tr from-orange-700 to-amber-700;
    }

    #blog-post .markdown-alert-caution {
        @apply bg-linear-to-tr from-rose-700/25 to-pink-700/25;
    }

    #blog-post .markdown-alert-caution .markdown-alert-title {
        @apply bg-linear-to-tr from-rose-700 to-pink-700;
    }

    /* Math */
    #blog-post .katex-html {
        @apply hidden;
    }

    #blog-post .katex-display {
        @apply text-xl lg:text-2xl;
    }

    /* Footnote section */
    #blog-post .footnotes {
        @apply p-0;
    }

    /* Miscellaneous */
    #blog-post hr {
        @apply border-1 text-gray-700;
    }
</style>
