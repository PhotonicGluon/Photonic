---
import ProjectLayout from "@layouts/ProjectLayout.astro";
import { Image } from "astro:assets";
import { getEntry } from "astro:content";

import ButtonLink from "@components/generic/ButtonLink.astro";
import KaTeXLoader from "@components/misc/KaTeXLoader.astro";

import bookCoverMockup from "@projects/abstract-algebra/cover-mockup.webp";

const project = (await getEntry("projects", "abstract-algebra"))!;
---

<ProjectLayout {...project.data}>
    <Fragment slot="head-scripts">
        <script
            is:inline
            defer
            src="https://cdn.jsdelivr.net/npm/katex@0.16.21/dist/katex.min.js"
            integrity="sha384-Rma6DA2IPUwhNxmrB/7S3Tno0YY7sFu9WSYMCuulLhIqYSGZ2gKCJWIqhBWqMQfh"
            crossorigin="anonymous"></script>
        <script
            is:inline
            defer
            src="https://cdn.jsdelivr.net/npm/katex@0.16.21/dist/contrib/auto-render.min.js"
            integrity="sha384-hCXGrW6PitJEwbkoStFjeJxv+fSOOQKOPbJxSfM6G5sWZjAyWhXiTIIAmQqnlLlh"
            crossorigin="anonymous"></script>
    </Fragment>

    <KaTeXLoader />

    {/* Main description */}
    <div class="text-base">
        <p>
            <em>A Complete Introduction to Abstract Algebra</em> is a textbook on abstract algebra.
        </p>
        <p>
            The exploration of such structures is fundamental to the current underpinning of scientific inquiries.
            For example, groups are important as they describe the symmetries which the laws of physics seem to
            obey. Finite fields are also used in coding theory and combinatorics. I hope this book will inspire
            more people to learn more about abstract algebra, beyond the simple introduction presented here.
        </p>
        <p class="pb-0">This book serves to achieve several goals.</p>
        <ul>
            <li>
                Provide a step-by-step explanation of core results from abstract algebra, without ambiguity of the
                results discussed.
            </li>
            <li>
                Demystify the core steps that many textbooks gloss over when proving results or when writing the
                solutions to problems/exercises.
            </li>
            <li>
                Ensure that results from abstract algebra are as accessible, as approachable, and as understandable
                for as many people as possible.
            </li>
        </ul>
        <p>
            I hope that this book can accomplish these goals and let readers enjoy the wonders of abstract algebra.
        </p>
        <p>
            This work is released under a
            <a href="https://creativecommons.org/licenses/by-sa/4.0/">
                Creative Commons Attribution-ShareAlike 4.0 International Licence
            </a>.
        </p>
    </div>

    {/* Book download and changelog */}
    <div class="block w-full text-center print:hidden">
        <div class="inline-block">
            <Image class="mb-3 h-auto w-9/10 max-w-64 rounded-3xl" src={bookCoverMockup} alt="Cover Mockup" />
            <div>
                <ButtonLink class="bg-sky-700 hover:bg-sky-800" id="book-download" href="#" download>
                    Loading Download...
                </ButtonLink>
            </div>
        </div>
    </div>

    <hr class="my-4 border border-gray-700 print:hidden" />
    <h2 class="!text-2xl leading-none md:!text-3xl">
        Latest Release Notes (<span id="latest-release" class="text-2xl md:text-3xl">Loading...</span>)
    </h2>
    <div
        class="[&_h3]:!text-base md:[&_h3]:!text-xl [&_li]:!text-start [&_li]:!text-sm md:[&_li]:!text-justify md:[&_li]:!text-base [&_p]:!text-start [&_p]:!text-sm md:[&_p]:!text-justify md:[&_p]:!text-base"
        id="changelog"
    >
        Loading...
    </div>
</ProjectLayout>

{/* Fonts' Styling */}
<style>
    @font-face {
        font-family: "CMU Serif";
        font-style: normal;
        font-weight: 400;
        src: url("/fonts/cmun-normal.ttf");
    }

    @font-face {
        font-family: "CMU Serif";
        font-style: normal;
        font-weight: 700;
        src: url("/fonts/cmun-bold.ttf");
    }

    @font-face {
        font-family: "CMU Serif";
        font-style: italic;
        font-weight: 400;
        src: url("/fonts/cmun-italic.ttf");
    }

    @font-face {
        font-family: "CMU Serif";
        font-style: italic;
        font-weight: 700;
        src: url("/fonts/cmun-bolditalic.ttf");
    }

    * {
        font-family: "CMU Serif", serif;
    }
</style>

{/* Download and Changelog Script */}
<script>
    import $ from "jquery";
    import showdown from "showdown";

    // Initialize Showdown converter
    // (Can't use Astro's markdown-remark cos' its only on server-side)
    const converter = new showdown.Converter();

    // Helper functions
    /**
     * Computes the ordinal suffix of a number.
     *
     * Adapted from https://stackoverflow.com/a/13627586.
     *
     * @param num The number to get the ordinal suffix for
     */
    function ordinalSuffix(num: number) {
        const tens = num % 10;
        const hundreds = num % 100;

        let suffix = "th";
        if (tens === 1 && hundreds !== 11) {
            suffix = "st";
        }
        if (tens === 2 && hundreds !== 12) {
            suffix = "nd";
        }
        if (tens === 3 && hundreds !== 13) {
            suffix = "rd";
        }

        return `${num}<sup>${suffix}</sup>`;
    }

    // Main code
    $(() => {
        $.get("https://api.github.com/repos/PhotonicGluon/Abstract-Algebra-Book/releases", (releases) => {
            const latestRelease = releases[0];
            const assets = latestRelease["assets"];
            const body = latestRelease["body"];

            const asset = assets[0];
            const name = asset["name"];
            const downloadURL = asset["browser_download_url"];

            const nameMatch = name.match(
                /Abstract_Algebra_v(?<edition>[\d.]+)(?:-build\.(?<build>\d+))?(?:-post\.(?<post>\d+))?\.pdf/,
            );
            const edition = nameMatch.groups["edition"];
            const build = nameMatch.groups["build"];
            const post = nameMatch.groups["post"];

            let downloadText = `Download ${ordinalSuffix(edition)} Edition`;
            if (build !== undefined) {
                downloadText += ` (Build ${build})`;
            }
            if (post !== undefined) {
                downloadText += ` (Post ${post})`;
            }

            $(`#book-download`).attr("href", downloadURL);
            $(`#book-download`).html(downloadText);

            $("#latest-release").html(latestRelease["name"]);
            $("#changelog").html(converter.makeHtml(body));

            // @ts-ignore Cannot find name
            renderMathInElement(document.getElementById("changelog"), {
                delimiters: [
                    { left: "$$", right: "$$", display: true },
                    { left: "$", right: "$", display: false },
                    { left: "\\(", right: "\\)", display: false },
                    { left: "\\[", right: "\\]", display: true },
                ],
                throwOnError: false,
            });
        });
    });
</script>
